---//---Индивидуальное задание 2---//---
---//---//---Номер 2---//---//---
Протокол биометрической криптографии Fuzzy Vault на основе кодов Рида-Соломона позволяет сохранить секретный ключ в защищенном хранилище (в "хранилище" может выступать, например, смартфон или USB-накопитель) и впоследствии использовать для аутентификации пользователя на основе его биометрических данных (например, отпечатка пальца).

Алгоритм LOCK:
1. Задайте пороговое значение ошибок t и длину кода Рида-Соломона n.
2. Сгенерируйте случайный многочлен f(x) степени t-1, используя n различных элементов поля Fq.
3. Сгенерируйте t случайных значений в поле Fq, обозначьте их как a1,...,at.
4. Вычислите значения многочлена f(x) в точках a1,...,at и добавьте их в список S.
5. Сохраните многочлен f(x) вместе со списком S в защищенном хранилище.

Алгоритм UNLOCK:
1. Задайте пороговое значение ошибок t, длину кода Рида-Соломона n и список S из защищенного хранилища.
2. Считайте с биометрического датчика значение точки b.
3. Вычислите значения многочлена Рида-Соломона r(x) = (x-a1)...(x-at) в точке b и обозначьте результат как s.
4. Используйте декодер Рида-Соломона для расшифровки многочлена f(x) из значений в списке S. Если декодер смог восстановить f(x), значит пользователь прошел аутентификацию.
5. В случае успешной аутентификации возвращайте секретный ключ, сохраненный вместе с многочленом f(x).

Заметим, что при реализации LOCK и UNLOCK необходимо принимать меры для защиты от атак, например, от перехвата многочлена f(x) и/или списка S из защищенного хранилища. Здесь мы предоставляем только базовое решение, а не полное решение, которое учитывает все возможные уязвимости и их последствия.


---//---//---Решение---//---//---
#Sage Math
import random

q = 19
F = PolynomialRing(GF(q), "x")

M = [1, 3, 2]
k = 3
t = 7
tempA = [2, 5, 3, 1, 4, 6, 7]
tempB1 = [4, 2, 3, 5, 9, 1, 7]
tempB2 = [4, 2, 3, 5, 9, 10, 1]
tempB3 = [4, 2, 3, 5, 9, 10, 11]

def p_x(M, el):
    res = 0
    for i in range(0, len(M)):
        res += M[i] * el ** i
    return F(res)

def Lock(A, M):
    Vault = {}
    for i in range(0, q):
        if i in A:
            Vault[i] = p_x(M, i)
        else:
            y = random.randrange(0, q)
            yi = p_x(M, i)
            while y == yi:
                y = random.randrange(0, q)
            Vault[i] = y
    return Vault

def Unlock(B, Vault):
    V = {}
    for i in range(len(B)):
        if B[i] in Vault.keys():
            V[B[i]] = Vault[B[i]]
    if len(V) < (t+k)/2:
        return "Unsuccessful!"
    res = RSDecode(V)
    return res

def RSDecode(V):
    n = len(V)
    A = list(V.keys())
    B = list(V.values())
    matr = []
    for i in range(0, n):
        line = []
        line.append(B[i])
        line.append(B[i]*A[i])
        line.append(-1)
        for j in range(1, n-2):
            line.append(-A[i]**j)
        matr.append(line)
    AA = Matrix(GF(q), matr)
        
    vec = []
    for i in range(0, n):
        vec.append(-B[i]*A[i]**2)
        
    BB = vector(GF(q), vec)
    #display(AA)
    #display(BB)
    res = AA.solve_right(BB)
    E = []
    for i in range(0, math.floor((n-k)/2)):
        E.append(res[i])
    E.append(1)
    EE = F(E)
    Q = []
    for i in range(math.floor((n-k)/2), n):
        Q.append(res[i])
    QQ = F(Q)
    qq, rr = QQ.quo_rem(EE)
    return rr 
    
v = Lock(tempA, M)
res = Unlock(tempB1, v)
if res != 0:
    display('Unsuccessful!')
else:
    display('Successful!')