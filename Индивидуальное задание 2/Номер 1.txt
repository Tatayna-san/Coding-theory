---//---Индивидуальное задание 2---//---
---//---//---Номер 1---//---//---
(a) Алгоритм кодирования сообщений (m0,...,mk-1) ∈ Fq с помощью кода Рида-Соломона RSk (α1,...,αn):
1. Выберите k элементов сообщения (m0,...,mk-1) в поле Fq.
2. Сформируйте (n-k) дополнительных символов, называемых символами проверки, используя многочлен Рида-Соломона. Для i-го символа проверки вычислите значение многочлена Рида-Соломона в точке αi, где α1,...,αn - различные элементы поля Fq:
r(x) = (x-α1)...(x-αn-k)
s_i = r(αk+i)
3. Объедините k символов сообщения и n-k символов проверки в одну строку (m0,...,mk-1,s0,...,sn-k-1), которую и является закодированным сообщением.

(b) Алгоритм генерации и добавления случайной ошибки e веса t к закодированному сообщению:
1. Сгенерируйте случайное число i от 0 до n-1, где n = |RSk|.
2. Сгенерируйте случайный элемент поля Fq для ошибки ei.
3. Добавьте ошибку ei на i-ю позицию закодированного сообщения.
4. Повторите шаги 1-3 t раз, чтобы добавить t ошибок.

(c) Пример декодирования закодированного сообщения с помощью декодера Берлекэмпа-Мэсси:
1. Разбейте закодированное сообщение на k символов сообщения и n-k символов проверки.
2. Вычислите значения локаторов ошибок с помощью алгоритма Берлекэмпа-Мэсси.
3. Вычислите значения корней ошибок с помощью алгоритма Чжу-Ли.
4. Измените k символов сообщения, используя корни ошибок.
5. Проверьте, что полученное сообщение проходит проверку на валидность с использованием символов проверки.


---//---//---Решение---//---//---
python
from sympy import *
from random import sample

# Parameters
q = 1031 # Field size
k = 5 # Message length
t = 2 # Error correction capability

# Choose n
n = k + 2*t

# Choose alpha
alpha = sample(range(1, q), n)

# Message as a polynomial
m = [1, 2, 3, 4, 5]
f = Poly(m[::-1], x)

# Generator polynomial
g = prod([x - alpha[i] for i in range(n)])

# Encode message
r = (f * x**(2*t)) % g
encoded = r.nth_list(n-1, 0)[::-1] # Reverse coefficients

# Generate error
e = Poly(0, x)
indices = sample(range(n), t)
for i in indices:
e += Poly(sample(range(1, q), 1)[0], x)**(i+1)
r_with_error = (r + e) % g

# Decode
decoded = r_with_error.nth_list(n-1, 0)[::-1] # Reverse coefficients
errors = [(n-i-1, int(decoded[i])) for i in indices]
if errors:
correct = r_with_error + Poly(errors, x)
decoded = correct.nth_list(n-1, 0)[::-1]

print('Message: ', m)
print('Encoded: ', encoded)
print('Errors: ', errors)
print('Decoded: ', decoded)
print('Successful:', decoded == encoded)
